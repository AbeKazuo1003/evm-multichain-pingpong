{
  "address": "0x2a66AbD199995c56353D628316a770C061C16Ace",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_endpoint",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        }
      ],
      "name": "forceResumeReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_configType",
          "type": "uint256"
        }
      ],
      "name": "getConfig",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReceiveVersion",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSendVersion",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_dstCounterMockAddress",
          "type": "bytes"
        }
      ],
      "name": "incrementCounter",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_dstCounterMockAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "gasAmountForDst",
          "type": "uint256"
        }
      ],
      "name": "incrementCounterWithAdapterParamsV1",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_dstCounterMockAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "gasAmountForDst",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "airdropEthQty",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "airdropAddr",
          "type": "address"
        }
      ],
      "name": "incrementCounterWithAdapterParamsV2",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16[]",
          "name": "_dstChainIds",
          "type": "uint16[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_dstCounterMockAddresses",
          "type": "bytes[]"
        },
        {
          "internalType": "address payable",
          "name": "_refundAddr",
          "type": "address"
        }
      ],
      "name": "incrementMultiCounter",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "layerZeroEndpoint",
      "outputs": [
        {
          "internalType": "contract ILayerZeroEndpoint",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "lzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "messageCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_configType",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_config",
          "type": "bytes"
        }
      ],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "sourceChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "confirmations",
          "type": "uint16"
        }
      ],
      "name": "setInboundConfirmations",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "setOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "sourceChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "confirmations",
          "type": "uint16"
        }
      ],
      "name": "setOutboundConfirmations",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "version",
          "type": "uint16"
        }
      ],
      "name": "setReceiveVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "version",
          "type": "uint16"
        }
      ],
      "name": "setSendVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_sourceAddress",
          "type": "bytes"
        }
      ],
      "name": "setTrustedSource",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "trustedSourceLookup",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x258aaf80d3c29b449f309814b6cb63474978b1ba73bcabcc2a0506713b5fd18b",
  "receipt": {
    "to": null,
    "from": "0xE6AD954a9B14b45816C45afE7Dc0E9F85819E010",
    "contractAddress": "0x2a66AbD199995c56353D628316a770C061C16Ace",
    "transactionIndex": 1,
    "gasUsed": "2650945",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000080000000002020000000000000000000800000000000000000000000001000000400000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000001000000000000000000000000000000000000000000000",
    "blockHash": "0x94396d250c729c424b0a92d7f2e6865c826e629d0df7fdeb379c4a2561ab1b4a",
    "transactionHash": "0x258aaf80d3c29b449f309814b6cb63474978b1ba73bcabcc2a0506713b5fd18b",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 8511546,
        "transactionHash": "0x258aaf80d3c29b449f309814b6cb63474978b1ba73bcabcc2a0506713b5fd18b",
        "address": "0x2a66AbD199995c56353D628316a770C061C16Ace",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e6ad954a9b14b45816c45afe7dc0e9f85819e010"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0x94396d250c729c424b0a92d7f2e6865c826e629d0df7fdeb379c4a2561ab1b4a"
      }
    ],
    "blockNumber": 8511546,
    "cumulativeGasUsed": "3091481",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x93f54D755A063cE7bB9e6Ac47Eccc8e33411d706"
  ],
  "numDeployments": 1,
  "solcInputHash": "a650fa1589f467ba57cf466e67cee7fc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_endpoint\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"forceResumeReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"}],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReceiveVersion\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSendVersion\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_dstCounterMockAddress\",\"type\":\"bytes\"}],\"name\":\"incrementCounter\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_dstCounterMockAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"gasAmountForDst\",\"type\":\"uint256\"}],\"name\":\"incrementCounterWithAdapterParamsV1\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_dstCounterMockAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"gasAmountForDst\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"airdropEthQty\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"airdropAddr\",\"type\":\"address\"}],\"name\":\"incrementCounterWithAdapterParamsV2\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"_dstChainIds\",\"type\":\"uint16[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_dstCounterMockAddresses\",\"type\":\"bytes[]\"},{\"internalType\":\"address payable\",\"name\":\"_refundAddr\",\"type\":\"address\"}],\"name\":\"incrementMultiCounter\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"layerZeroEndpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_config\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"sourceChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"confirmations\",\"type\":\"uint16\"}],\"name\":\"setInboundConfirmations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"sourceChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"confirmations\",\"type\":\"uint16\"}],\"name\":\"setOutboundConfirmations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"version\",\"type\":\"uint16\"}],\"name\":\"setReceiveVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"version\",\"type\":\"uint16\"}],\"name\":\"setSendVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_sourceAddress\",\"type\":\"bytes\"}],\"name\":\"setTrustedSource\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"trustedSourceLookup\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OmniCounter.sol\":\"OmniCounter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/OmniCounter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\npragma solidity 0.8.4;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./interfaces/ILayerZeroReceiver.sol\\\";\\r\\nimport \\\"./interfaces/ILayerZeroEndpoint.sol\\\";\\r\\nimport \\\"./interfaces/ILayerZeroUserApplicationConfig.sol\\\";\\r\\n\\r\\ncontract OmniCounter is Ownable, ILayerZeroReceiver, ILayerZeroUserApplicationConfig {\\r\\n    using SafeMath for uint;\\r\\n    // keep track of how many messages have been received from other chains\\r\\n    uint public messageCounter;\\r\\n    // required: the LayerZero endpoint which is passed in the constructor\\r\\n    ILayerZeroEndpoint public layerZeroEndpoint;\\r\\n    mapping(uint16 => bytes) public trustedSourceLookup;\\r\\n\\r\\n    constructor(address _endpoint) {\\r\\n        layerZeroEndpoint = ILayerZeroEndpoint(_endpoint);\\r\\n    }\\r\\n\\r\\n    function getCounter() public view returns (uint) {\\r\\n        return messageCounter;\\r\\n    }\\r\\n\\r\\n    // overrides lzReceive function in ILayerZeroReceiver.\\r\\n    // automatically invoked on the receiving chain after the source chain calls endpoint.send(...)\\r\\n    function lzReceive(\\r\\n        uint16 _srcChainId,\\r\\n        bytes memory _srcAddress,\\r\\n        uint64, /*_nonce*/\\r\\n        bytes memory /*_payload*/\\r\\n    ) external override {\\r\\n        // boilerplate: only allow this endpiont to be the caller of lzReceive!\\r\\n        require(msg.sender == address(layerZeroEndpoint));\\r\\n        // owner must have setTrustedSource() to allow its source contracts to send to this contract\\r\\n        require(\\r\\n            _srcAddress.length == trustedSourceLookup[_srcChainId].length && keccak256(_srcAddress) == keccak256(trustedSourceLookup[_srcChainId]),\\r\\n            \\\"Invalid source sender address. owner should call setTrustedSource() to enable source contract\\\"\\r\\n        );\\r\\n\\r\\n        messageCounter += 1;\\r\\n    }\\r\\n\\r\\n    // custom function that wraps endpoint.send(...) which will\\r\\n    // cause lzReceive() to be called on the destination chain!\\r\\n    function incrementCounter(uint16 _dstChainId, bytes calldata _dstCounterMockAddress) public payable {\\r\\n        layerZeroEndpoint.send{value: msg.value}(_dstChainId, _dstCounterMockAddress, bytes(\\\"\\\"), payable(msg.sender), address(0x0), bytes(\\\"\\\"));\\r\\n    }\\r\\n\\r\\n    // _adapterParams (v1)\\r\\n    // customize the gas amount to be used on the destination chain.\\r\\n    function incrementCounterWithAdapterParamsV1(uint16 _dstChainId, bytes calldata _dstCounterMockAddress, uint gasAmountForDst) public payable {\\r\\n        uint16 version = 1;\\r\\n        // make look like this: 0x00010000000000000000000000000000000000000000000000000000000000030d40\\r\\n        bytes memory _adapterParams = abi.encodePacked(\\r\\n            version,\\r\\n            gasAmountForDst\\r\\n        );\\r\\n        layerZeroEndpoint.send{value: msg.value}(_dstChainId, _dstCounterMockAddress, bytes(\\\"\\\"), payable(msg.sender), address(0x0), _adapterParams);\\r\\n    }\\r\\n\\r\\n    // _adapterParams (v2)\\r\\n    // specify a small amount of notive token you want to airdropped to your wallet on destination\\r\\n    function incrementCounterWithAdapterParamsV2(uint16 _dstChainId, bytes calldata _dstCounterMockAddress, uint gasAmountForDst, uint airdropEthQty, address airdropAddr) public payable {\\r\\n        uint16 version = 2;\\r\\n        bytes memory _adapterParams = abi.encodePacked(\\r\\n            version,\\r\\n            gasAmountForDst,\\r\\n            airdropEthQty,      // how must dust to receive on destination\\r\\n            airdropAddr         // the address to receive the dust\\r\\n        );\\r\\n        layerZeroEndpoint.send{value: msg.value}(_dstChainId, _dstCounterMockAddress, bytes(\\\"\\\"), payable(msg.sender), address(0x0), _adapterParams);\\r\\n    }\\r\\n\\r\\n    // call send() to multiple destinations in the same transaction!\\r\\n    function incrementMultiCounter(uint16[] calldata _dstChainIds, bytes[] calldata _dstCounterMockAddresses, address payable _refundAddr) public payable {\\r\\n        require(_dstChainIds.length == _dstCounterMockAddresses.length, \\\"_dstChainIds.length, _dstCounterMockAddresses.length not the same\\\");\\r\\n\\r\\n        uint numberOfChains = _dstChainIds.length;\\r\\n\\r\\n        // note: could result in a few wei of dust left in contract\\r\\n        uint valueToSend = msg.value.div(numberOfChains);\\r\\n\\r\\n        // send() each chainId + dst address pair\\r\\n        for (uint i = 0; i < numberOfChains; ++i) {\\r\\n            // a Communicator.sol instance is the 'endpoint'\\r\\n            // .send() each payload to the destination chainId + UA destination address\\r\\n            layerZeroEndpoint.send{value: valueToSend}(_dstChainIds[i], _dstCounterMockAddresses[i], bytes(\\\"\\\"), _refundAddr, address(0x0), bytes(\\\"\\\"));\\r\\n        }\\r\\n\\r\\n        // refund eth if too much was sent into this contract call\\r\\n        uint refund = msg.value.sub(valueToSend.mul(numberOfChains));\\r\\n        _refundAddr.transfer(refund);\\r\\n    }\\r\\n\\r\\n    function setConfig(\\r\\n        uint16, /*_version*/\\r\\n        uint16 _chainId,\\r\\n        uint _configType,\\r\\n        bytes calldata _config\\r\\n    ) external override {\\r\\n        layerZeroEndpoint.setConfig(layerZeroEndpoint.getSendVersion(address(this)), _chainId, _configType, _config);\\r\\n    }\\r\\n\\r\\n    function getConfig(\\r\\n        uint16, /*_dstChainId*/\\r\\n        uint16 _chainId,\\r\\n        address,\\r\\n        uint _configType\\r\\n    ) external view returns (bytes memory) {\\r\\n        return layerZeroEndpoint.getConfig(layerZeroEndpoint.getSendVersion(address(this)), _chainId, address(this), _configType);\\r\\n    }\\r\\n\\r\\n    function setSendVersion(uint16 version) external override {\\r\\n        layerZeroEndpoint.setSendVersion(version);\\r\\n    }\\r\\n\\r\\n    function setReceiveVersion(uint16 version) external override {\\r\\n        layerZeroEndpoint.setReceiveVersion(version);\\r\\n    }\\r\\n\\r\\n    function getSendVersion() external view returns (uint16) {\\r\\n        return layerZeroEndpoint.getSendVersion(address(this));\\r\\n    }\\r\\n\\r\\n    function getReceiveVersion() external view returns (uint16) {\\r\\n        return layerZeroEndpoint.getReceiveVersion(address(this));\\r\\n    }\\r\\n\\r\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external override {\\r\\n        layerZeroEndpoint.forceResumeReceive(_srcChainId, _srcAddress);\\r\\n    }\\r\\n\\r\\n    // set the Oracle to be used by this UA for LayerZero messages\\r\\n    function setOracle(uint16 dstChainId, address oracle) external {\\r\\n        uint TYPE_ORACLE = 6; // from UltraLightNode\\r\\n        // set the Oracle\\r\\n        layerZeroEndpoint.setConfig(\\r\\n            layerZeroEndpoint.getSendVersion(address(this)),\\r\\n            dstChainId,\\r\\n            TYPE_ORACLE,\\r\\n            abi.encode(oracle)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // _chainId - the chainId for the source contract\\r\\n    // _sourceAddress - the contract address on the source chainId\\r\\n    // the owner must set source contract addresses.\\r\\n    // in lzReceive(), a require() ensures only messages\\r\\n    // from known contracts can be received.\\r\\n    function setTrustedSource(uint16 _chainId, bytes calldata _sourceAddress) external onlyOwner {\\r\\n        require(trustedSourceLookup[_chainId].length == 0, \\\"The source address has already been set for the chainId!\\\");\\r\\n        trustedSourceLookup[_chainId] = _sourceAddress;\\r\\n    }\\r\\n\\r\\n    // set the inbound block confirmations\\r\\n    function setInboundConfirmations(uint16 sourceChainId, uint16 confirmations) external {\\r\\n        layerZeroEndpoint.setConfig(\\r\\n            layerZeroEndpoint.getSendVersion(address(this)),\\r\\n            sourceChainId,\\r\\n            2, // CONFIG_TYPE_INBOUND_BLOCK_CONFIRMATIONS\\r\\n            abi.encode(confirmations)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // set outbound block confirmations\\r\\n    function setOutboundConfirmations(uint16 sourceChainId, uint16 confirmations) external {\\r\\n        layerZeroEndpoint.setConfig(\\r\\n            layerZeroEndpoint.getSendVersion(address(this)),\\r\\n            sourceChainId,\\r\\n            5, // CONFIG_TYPE_OUTBOUND_BLOCK_CONFIRMATIONS\\r\\n            abi.encode(confirmations)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // allow this contract to receive ether\\r\\n    fallback() external payable {}\\r\\n    receive() external payable {}\\r\\n}\",\"keccak256\":\"0x6af5ed4298c28ca35037bf64cb56cc8757a05362b498d59a1813f2d205ff3013\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILayerZeroEndpoint.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\n\\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\\n    // @param _payload - a custom bytes payload to send to the destination contract\\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\\n    function send(uint16 _dstChainId, bytes calldata _destination, bytes calldata _payload, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\\n\\n    // @notice used by the messaging library to publish verified payload\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source contract (as bytes) at the source chain\\n    // @param _dstAddress - the address on destination chain\\n    // @param _nonce - the unbound message ordering nonce\\n    // @param _gasLimit - the gas limit for external contract execution\\n    // @param _payload - verified payload to send to the destination contract\\n    function receivePayload(uint16 _srcChainId, bytes calldata _srcAddress, address _dstAddress, uint64 _nonce, uint _gasLimit, bytes calldata _payload) external;\\n\\n    // @notice get the inboundNonce of a receiver from a source chain which could be EVM or non-EVM chain\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\\n\\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\\n    // @param _srcAddress - the source chain contract address\\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\\n\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _userApplication - the user app address on this EVM chain\\n    // @param _payload - the custom message to send over LayerZero\\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\\n    function estimateFees(uint16 _dstChainId, address _userApplication, bytes calldata _payload, bool _payInZRO, bytes calldata _adapterParam) external view returns (uint nativeFee, uint zroFee);\\n\\n    // @notice get this Endpoint's immutable source identifier\\n    function getChainId() external view returns (uint16);\\n\\n    // @notice the interface to retry failed message on this Endpoint destination\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    // @param _payload - the payload to be retried\\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\\n\\n    // @notice query if any STORED payload (message blocking) at the endpoint.\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\\n\\n    // @notice query if the _libraryAddress is valid for sending msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the _libraryAddress is valid for receiving msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the non-reentrancy guard for send() is on\\n    // @return true if the guard is on. false otherwise\\n    function isSendingPayload() external view returns (bool);\\n\\n    // @notice query if the non-reentrancy guard for receive() is on\\n    // @return true if the guard is on. false otherwise\\n    function isReceivingPayload() external view returns (bool);\\n\\n    // @notice get the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _userApplication - the contract address of the user application\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    function getConfig(uint16 _version, uint16 _chainId, address _userApplication, uint _configType) external view returns (bytes memory);\\n\\n    // @notice get the send() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getSendVersion(address _userApplication) external view returns (uint16);\\n\\n    // @notice get the lzReceive() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\\n}\\n\",\"keccak256\":\"0xbc2e0022d4d53d136830aa90037be2ed7a0966f5fd1b409bf5986185984c495f\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroReceiver {\\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\\n    // @param _srcChainId - the source endpoint identifier\\n    // @param _srcAddress - the source sending contract address from the source chain\\n    // @param _nonce - the ordered message nonce\\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\\n}\\n\",\"keccak256\":\"0xd1617e455d90d41556bba636bc440627d301ec481de16ff04fbd520333c3c6f3\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILayerZeroUserApplicationConfig.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroUserApplicationConfig {\\n    // @notice set the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    // @param _config - configuration in the bytes. can encode arbitrary content.\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\\n\\n    // @notice set the send() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setSendVersion(uint16 _version) external;\\n\\n    // @notice set the lzReceive() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setReceiveVersion(uint16 _version) external;\\n\\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\n    // @param _srcChainId - the chainId of the source chain\\n    // @param _srcAddress - the contract address of the source contract at the source chain\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\\n}\\n\",\"keccak256\":\"0xdc7e072cf3064081a8edf4a286ca43ddecc24330f2923d96f416f9d3f6538447\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200302e3803806200302e833981810160405281019062000037919062000182565b620000576200004b6200009f60201b60201c565b620000a760201b60201c565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620001fc565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000815190506200017c81620001e2565b92915050565b6000602082840312156200019557600080fd5b6000620001a5848285016200016b565b91505092915050565b6000620001bb82620001c2565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b620001ed81620001ae565b8114620001f957600080fd5b50565b612e22806200020c6000396000f3fe6080604052600436106101435760003560e01c8063715018a6116100b6578063cf5d14711161006f578063cf5d1471146103f7578063d73f057e14610422578063ea80d9391461044b578063ed0cc14f14610467578063f2fde38b14610483578063f5ecbdbc146104ac5761014a565b8063715018a61461030857806381c986ee1461031f5780638ada066e1461035c5780638da5cb5b14610387578063a245b77b146103b2578063cbed8b9c146103ce5761014a565b80632b2257dc116101085780632b2257dc1461020e57806342d65a8d14610237578063492e527e14610260578063529c75881461028957806354a5beda146102b45780636df65371146102df5761014a565b80621d35671461014c57806307968db11461017557806307e0db17146101a057806308d968b9146101c957806310ddb137146101e55761014a565b3661014a57005b005b34801561015857600080fd5b50610173600480360381019061016e9190611f18565b6104e9565b005b34801561018157600080fd5b5061018a61060d565b60405161019791906123da565b60405180910390f35b3480156101ac57600080fd5b506101c760048036038101906101c29190611d34565b610633565b005b6101e360048036038101906101de9190611e86565b6106c3565b005b3480156101f157600080fd5b5061020c60048036038101906102079190611d34565b6107a7565b005b34801561021a57600080fd5b5061023560048036038101906102309190611fab565b610837565b005b34801561024357600080fd5b5061025e60048036038101906102599190611dc2565b610998565b005b34801561026c57600080fd5b5061028760048036038101906102829190611d86565b610a2e565b005b34801561029557600080fd5b5061029e610b95565b6040516102ab91906126d1565b60405180910390f35b3480156102c057600080fd5b506102c9610b9b565b6040516102d69190612495565b60405180910390f35b3480156102eb57600080fd5b5061030660048036038101906103019190611fab565b610c4d565b005b34801561031457600080fd5b5061031d610dae565b005b34801561032b57600080fd5b5061034660048036038101906103419190611d34565b610e36565b60405161035391906123b8565b60405180910390f35b34801561036857600080fd5b50610371610ed6565b60405161037e91906126d1565b60405180910390f35b34801561039357600080fd5b5061039c610ee0565b6040516103a9919061239d565b60405180910390f35b6103cc60048036038101906103c79190611e1a565b610f09565b005b3480156103da57600080fd5b506103f560048036038101906103f0919061204a565b610fe7565b005b34801561040357600080fd5b5061040c61112d565b6040516104199190612495565b60405180910390f35b34801561042e57600080fd5b5061044960048036038101906104449190611dc2565b6111df565b005b61046560048036038101906104609190611c6a565b6112f5565b005b610481600480360381019061047c9190611dc2565b611542565b005b34801561048f57600080fd5b506104aa60048036038101906104a59190611c41565b611600565b005b3480156104b857600080fd5b506104d360048036038101906104ce9190611fe7565b6116f8565b6040516104e091906123b8565b60405180910390f35b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461054357600080fd5b600360008561ffff1661ffff1681526020019081526020016000208054610569906129f5565b905083511480156105af5750600360008561ffff1661ffff16815260200190815260200160002060405161059d919061230c565b60405180910390208380519060200120145b6105ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105e5906123f5565b60405180910390fd5b600180600082825461060091906127e6565b9250508190555050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166307e0db17826040518263ffffffff1660e01b815260040161068e9190612495565b600060405180830381600087803b1580156106a857600080fd5b505af11580156106bc573d6000803e3d6000fd5b5050505050565b6000600290506000818585856040516020016106e2949392919061234f565b6040516020818303038152906040529050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c5803100348a8a8a60405180602001604052806000815250336000896040518963ffffffff1660e01b815260040161076b97969594939291906124e2565b6000604051808303818588803b15801561078457600080fd5b505af1158015610798573d6000803e3d6000fd5b50505050505050505050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166310ddb137826040518263ffffffff1660e01b81526004016108029190612495565b600060405180830381600087803b15801561081c57600080fd5b505af1158015610830573d6000803e3d6000fd5b5050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cbed8b9c600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663096568f6306040518263ffffffff1660e01b81526004016108d0919061239d565b60206040518083038186803b1580156108e857600080fd5b505afa1580156108fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109209190611d5d565b846005856040516020016109349190612495565b6040516020818303038152906040526040518563ffffffff1660e01b815260040161096294939291906125eb565b600060405180830381600087803b15801561097c57600080fd5b505af1158015610990573d6000803e3d6000fd5b505050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342d65a8d8484846040518463ffffffff1660e01b81526004016109f7939291906124b0565b600060405180830381600087803b158015610a1157600080fd5b505af1158015610a25573d6000803e3d6000fd5b50505050505050565b600060069050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cbed8b9c600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663096568f6306040518263ffffffff1660e01b8152600401610acd919061239d565b60206040518083038186803b158015610ae557600080fd5b505afa158015610af9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1d9190611d5d565b858486604051602001610b30919061239d565b6040516020818303038152906040526040518563ffffffff1660e01b8152600401610b5e9493929190612685565b600060405180830381600087803b158015610b7857600080fd5b505af1158015610b8c573d6000803e3d6000fd5b50505050505050565b60015481565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663096568f6306040518263ffffffff1660e01b8152600401610bf8919061239d565b60206040518083038186803b158015610c1057600080fd5b505afa158015610c24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c489190611d5d565b905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cbed8b9c600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663096568f6306040518263ffffffff1660e01b8152600401610ce6919061239d565b60206040518083038186803b158015610cfe57600080fd5b505afa158015610d12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d369190611d5d565b84600285604051602001610d4a9190612495565b6040516020818303038152906040526040518563ffffffff1660e01b8152600401610d78949392919061259f565b600060405180830381600087803b158015610d9257600080fd5b505af1158015610da6573d6000803e3d6000fd5b505050505050565b610db6611864565b73ffffffffffffffffffffffffffffffffffffffff16610dd4610ee0565b73ffffffffffffffffffffffffffffffffffffffff1614610e2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2190612455565b60405180910390fd5b610e34600061186c565b565b60036020528060005260406000206000915090508054610e55906129f5565b80601f0160208091040260200160405190810160405280929190818152602001828054610e81906129f5565b8015610ece5780601f10610ea357610100808354040283529160200191610ece565b820191906000526020600020905b815481529060010190602001808311610eb157829003601f168201915b505050505081565b6000600154905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006001905060008183604051602001610f24929190612323565b6040516020818303038152906040529050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c58031003488888860405180602001604052806000815250336000896040518963ffffffff1660e01b8152600401610fad97969594939291906124e2565b6000604051808303818588803b158015610fc657600080fd5b505af1158015610fda573d6000803e3d6000fd5b5050505050505050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cbed8b9c600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663096568f6306040518263ffffffff1660e01b8152600401611080919061239d565b60206040518083038186803b15801561109857600080fd5b505afa1580156110ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d09190611d5d565b868686866040518663ffffffff1660e01b81526004016110f4959493929190612637565b600060405180830381600087803b15801561110e57600080fd5b505af1158015611122573d6000803e3d6000fd5b505050505050505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663da1a7c9a306040518263ffffffff1660e01b815260040161118a919061239d565b60206040518083038186803b1580156111a257600080fd5b505afa1580156111b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111da9190611d5d565b905090565b6111e7611864565b73ffffffffffffffffffffffffffffffffffffffff16611205610ee0565b73ffffffffffffffffffffffffffffffffffffffff161461125b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161125290612455565b60405180910390fd5b6000600360008561ffff1661ffff1681526020019081526020016000208054611283906129f5565b9050146112c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112bc90612475565b60405180910390fd5b8181600360008661ffff1661ffff16815260200190815260200160002091906112ef929190611972565b50505050565b82829050858590501461133d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161133490612415565b60405180910390fd5b6000858590509050600061135a823461193090919063ffffffff16565b905060005b828110156114c757600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c5803100838a8a858181106113df577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906113f49190611d34565b89898681811061142d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200281019061143f91906126ec565b604051806020016040528060008152508a6000604051806020016040528060008152506040518963ffffffff1660e01b815260040161148497969594939291906124e2565b6000604051808303818588803b15801561149d57600080fd5b505af11580156114b1573d6000803e3d6000fd5b5050505050806114c090612a58565b905061135f565b5060006114ef6114e0848461194690919063ffffffff16565b3461195c90919063ffffffff16565b90508373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611537573d6000803e3d6000fd5b505050505050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c58031003485858560405180602001604052806000815250336000604051806020016040528060008152506040518963ffffffff1660e01b81526004016115c997969594939291906124e2565b6000604051808303818588803b1580156115e257600080fd5b505af11580156115f6573d6000803e3d6000fd5b5050505050505050565b611608611864565b73ffffffffffffffffffffffffffffffffffffffff16611626610ee0565b73ffffffffffffffffffffffffffffffffffffffff161461167c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161167390612455565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156116ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116e390612435565b60405180910390fd5b6116f58161186c565b50565b6060600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f5ecbdbc600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663096568f6306040518263ffffffff1660e01b8152600401611793919061239d565b60206040518083038186803b1580156117ab57600080fd5b505afa1580156117bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e39190611d5d565b8630866040518563ffffffff1660e01b8152600401611805949392919061255a565b60006040518083038186803b15801561181d57600080fd5b505afa158015611831573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061185a9190611cf3565b9050949350505050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000818361193e919061283c565b905092915050565b60008183611954919061286d565b905092915050565b6000818361196a91906128c7565b905092915050565b82805461197e906129f5565b90600052602060002090601f0160209004810192826119a057600085556119e7565b82601f106119b957803560ff19168380011785556119e7565b828001600101855582156119e7579182015b828111156119e65782358255916020019190600101906119cb565b5b5090506119f491906119f8565b5090565b5b80821115611a115760008160009055506001016119f9565b5090565b6000611a28611a2384612768565b612743565b905082815260208101848484011115611a4057600080fd5b611a4b8482856129b3565b509392505050565b6000611a66611a6184612768565b612743565b905082815260208101848484011115611a7e57600080fd5b611a898482856129c2565b509392505050565b600081359050611aa081612d79565b92915050565b600081359050611ab581612d90565b92915050565b60008083601f840112611acd57600080fd5b8235905067ffffffffffffffff811115611ae657600080fd5b602083019150836020820283011115611afe57600080fd5b9250929050565b60008083601f840112611b1757600080fd5b8235905067ffffffffffffffff811115611b3057600080fd5b602083019150836020820283011115611b4857600080fd5b9250929050565b60008083601f840112611b6157600080fd5b8235905067ffffffffffffffff811115611b7a57600080fd5b602083019150836001820283011115611b9257600080fd5b9250929050565b600082601f830112611baa57600080fd5b8135611bba848260208601611a15565b91505092915050565b600082601f830112611bd457600080fd5b8151611be4848260208601611a53565b91505092915050565b600081359050611bfc81612da7565b92915050565b600081519050611c1181612da7565b92915050565b600081359050611c2681612dbe565b92915050565b600081359050611c3b81612dd5565b92915050565b600060208284031215611c5357600080fd5b6000611c6184828501611a91565b91505092915050565b600080600080600060608688031215611c8257600080fd5b600086013567ffffffffffffffff811115611c9c57600080fd5b611ca888828901611b05565b9550955050602086013567ffffffffffffffff811115611cc757600080fd5b611cd388828901611abb565b93509350506040611ce688828901611aa6565b9150509295509295909350565b600060208284031215611d0557600080fd5b600082015167ffffffffffffffff811115611d1f57600080fd5b611d2b84828501611bc3565b91505092915050565b600060208284031215611d4657600080fd5b6000611d5484828501611bed565b91505092915050565b600060208284031215611d6f57600080fd5b6000611d7d84828501611c02565b91505092915050565b60008060408385031215611d9957600080fd5b6000611da785828601611bed565b9250506020611db885828601611a91565b9150509250929050565b600080600060408486031215611dd757600080fd5b6000611de586828701611bed565b935050602084013567ffffffffffffffff811115611e0257600080fd5b611e0e86828701611b4f565b92509250509250925092565b60008060008060608587031215611e3057600080fd5b6000611e3e87828801611bed565b945050602085013567ffffffffffffffff811115611e5b57600080fd5b611e6787828801611b4f565b93509350506040611e7a87828801611c17565b91505092959194509250565b60008060008060008060a08789031215611e9f57600080fd5b6000611ead89828a01611bed565b965050602087013567ffffffffffffffff811115611eca57600080fd5b611ed689828a01611b4f565b95509550506040611ee989828a01611c17565b9350506060611efa89828a01611c17565b9250506080611f0b89828a01611a91565b9150509295509295509295565b60008060008060808587031215611f2e57600080fd5b6000611f3c87828801611bed565b945050602085013567ffffffffffffffff811115611f5957600080fd5b611f6587828801611b99565b9350506040611f7687828801611c2c565b925050606085013567ffffffffffffffff811115611f9357600080fd5b611f9f87828801611b99565b91505092959194509250565b60008060408385031215611fbe57600080fd5b6000611fcc85828601611bed565b9250506020611fdd85828601611bed565b9150509250929050565b60008060008060808587031215611ffd57600080fd5b600061200b87828801611bed565b945050602061201c87828801611bed565b935050604061202d87828801611a91565b925050606061203e87828801611c17565b91505092959194509250565b60008060008060006080868803121561206257600080fd5b600061207088828901611bed565b955050602061208188828901611bed565b945050604061209288828901611c17565b935050606086013567ffffffffffffffff8111156120af57600080fd5b6120bb88828901611b4f565b92509250509295509295909350565b6120d38161290d565b82525050565b6120e2816128fb565b82525050565b6120f96120f4826128fb565b612aa1565b82525050565b600061210b83856127b9565b93506121188385846129b3565b61212183612b9d565b840190509392505050565b6000612137826127ae565b61214181856127b9565b93506121518185602086016129c2565b61215a81612b9d565b840191505092915050565b60008154612172816129f5565b61217c81866127ca565b9450600182166000811461219757600181146121a8576121db565b60ff198316865281860193506121db565b6121b185612799565b60005b838110156121d3578154818901526001820191506020810190506121b4565b838801955050505b50505092915050565b6121ed8161296b565b82525050565b6121fc8161298f565b82525050565b61220b816129a1565b82525050565b600061221e605d836127d5565b915061222982612bc8565b606082019050919050565b60006122416041836127d5565b915061224c82612c3d565b606082019050919050565b60006122646026836127d5565b915061226f82612cb2565b604082019050919050565b60006122876020836127d5565b915061229282612d01565b602082019050919050565b60006122aa6038836127d5565b91506122b582612d2a565b604082019050919050565b6122c98161291f565b82525050565b6122e06122db8261291f565b612ab3565b82525050565b6122ef8161294d565b82525050565b6123066123018261294d565b612ad7565b82525050565b60006123188284612165565b915081905092915050565b600061232f82856122cf565b60028201915061233f82846122f5565b6020820191508190509392505050565b600061235b82876122cf565b60028201915061236b82866122f5565b60208201915061237b82856122f5565b60208201915061238b82846120e8565b60148201915081905095945050505050565b60006020820190506123b260008301846120d9565b92915050565b600060208201905081810360008301526123d2818461212c565b905092915050565b60006020820190506123ef60008301846121e4565b92915050565b6000602082019050818103600083015261240e81612211565b9050919050565b6000602082019050818103600083015261242e81612234565b9050919050565b6000602082019050818103600083015261244e81612257565b9050919050565b6000602082019050818103600083015261246e8161227a565b9050919050565b6000602082019050818103600083015261248e8161229d565b9050919050565b60006020820190506124aa60008301846122c0565b92915050565b60006040820190506124c560008301866122c0565b81810360208301526124d88184866120ff565b9050949350505050565b600060c0820190506124f7600083018a6122c0565b818103602083015261250a81888a6120ff565b9050818103604083015261251e818761212c565b905061252d60608301866120ca565b61253a60808301856120d9565b81810360a083015261254c818461212c565b905098975050505050505050565b600060808201905061256f60008301876122c0565b61257c60208301866122c0565b61258960408301856120d9565b61259660608301846122e6565b95945050505050565b60006080820190506125b460008301876122c0565b6125c160208301866122c0565b6125ce60408301856121f3565b81810360608301526125e0818461212c565b905095945050505050565b600060808201905061260060008301876122c0565b61260d60208301866122c0565b61261a6040830185612202565b818103606083015261262c818461212c565b905095945050505050565b600060808201905061264c60008301886122c0565b61265960208301876122c0565b61266660408301866122e6565b81810360608301526126798184866120ff565b90509695505050505050565b600060808201905061269a60008301876122c0565b6126a760208301866122c0565b6126b460408301856122e6565b81810360608301526126c6818461212c565b905095945050505050565b60006020820190506126e660008301846122e6565b92915050565b6000808335600160200384360303811261270557600080fd5b80840192508235915067ffffffffffffffff82111561272357600080fd5b60208301925060018202360383131561273b57600080fd5b509250929050565b600061274d61275e565b90506127598282612a27565b919050565b6000604051905090565b600067ffffffffffffffff82111561278357612782612b6e565b5b61278c82612b9d565b9050602081019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60006127f18261294d565b91506127fc8361294d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561283157612830612ae1565b5b828201905092915050565b60006128478261294d565b91506128528361294d565b92508261286257612861612b10565b5b828204905092915050565b60006128788261294d565b91506128838361294d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156128bc576128bb612ae1565b5b828202905092915050565b60006128d28261294d565b91506128dd8361294d565b9250828210156128f0576128ef612ae1565b5b828203905092915050565b60006129068261292d565b9050919050565b60006129188261292d565b9050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600067ffffffffffffffff82169050919050565b60006129768261297d565b9050919050565b60006129888261292d565b9050919050565b600061299a8261294d565b9050919050565b60006129ac8261294d565b9050919050565b82818337600083830152505050565b60005b838110156129e05780820151818401526020810190506129c5565b838111156129ef576000848401525b50505050565b60006002820490506001821680612a0d57607f821691505b60208210811415612a2157612a20612b3f565b5b50919050565b612a3082612b9d565b810181811067ffffffffffffffff82111715612a4f57612a4e612b6e565b5b80604052505050565b6000612a638261294d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612a9657612a95612ae1565b5b600182019050919050565b6000612aac82612ac5565b9050919050565b6000612abe82612bae565b9050919050565b6000612ad082612bbb565b9050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160f01b9050919050565b60008160601b9050919050565b7f496e76616c696420736f757263652073656e64657220616464726573732e206f60008201527f776e65722073686f756c642063616c6c2073657454727573746564536f75726360208201527f65282920746f20656e61626c6520736f7572636520636f6e7472616374000000604082015250565b7f5f647374436861696e4964732e6c656e6774682c205f647374436f756e74657260008201527f4d6f636b4164647265737365732e6c656e677468206e6f74207468652073616d60208201527f6500000000000000000000000000000000000000000000000000000000000000604082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f54686520736f7572636520616464726573732068617320616c7265616479206260008201527f65656e2073657420666f722074686520636861696e4964210000000000000000602082015250565b612d82816128fb565b8114612d8d57600080fd5b50565b612d998161290d565b8114612da457600080fd5b50565b612db08161291f565b8114612dbb57600080fd5b50565b612dc78161294d565b8114612dd257600080fd5b50565b612dde81612957565b8114612de957600080fd5b5056fea2646970667358221220d66ce8a28fa28128846d620d2e08aac252aff31c2bef9df6c163b4153f11967a64736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106101435760003560e01c8063715018a6116100b6578063cf5d14711161006f578063cf5d1471146103f7578063d73f057e14610422578063ea80d9391461044b578063ed0cc14f14610467578063f2fde38b14610483578063f5ecbdbc146104ac5761014a565b8063715018a61461030857806381c986ee1461031f5780638ada066e1461035c5780638da5cb5b14610387578063a245b77b146103b2578063cbed8b9c146103ce5761014a565b80632b2257dc116101085780632b2257dc1461020e57806342d65a8d14610237578063492e527e14610260578063529c75881461028957806354a5beda146102b45780636df65371146102df5761014a565b80621d35671461014c57806307968db11461017557806307e0db17146101a057806308d968b9146101c957806310ddb137146101e55761014a565b3661014a57005b005b34801561015857600080fd5b50610173600480360381019061016e9190611f18565b6104e9565b005b34801561018157600080fd5b5061018a61060d565b60405161019791906123da565b60405180910390f35b3480156101ac57600080fd5b506101c760048036038101906101c29190611d34565b610633565b005b6101e360048036038101906101de9190611e86565b6106c3565b005b3480156101f157600080fd5b5061020c60048036038101906102079190611d34565b6107a7565b005b34801561021a57600080fd5b5061023560048036038101906102309190611fab565b610837565b005b34801561024357600080fd5b5061025e60048036038101906102599190611dc2565b610998565b005b34801561026c57600080fd5b5061028760048036038101906102829190611d86565b610a2e565b005b34801561029557600080fd5b5061029e610b95565b6040516102ab91906126d1565b60405180910390f35b3480156102c057600080fd5b506102c9610b9b565b6040516102d69190612495565b60405180910390f35b3480156102eb57600080fd5b5061030660048036038101906103019190611fab565b610c4d565b005b34801561031457600080fd5b5061031d610dae565b005b34801561032b57600080fd5b5061034660048036038101906103419190611d34565b610e36565b60405161035391906123b8565b60405180910390f35b34801561036857600080fd5b50610371610ed6565b60405161037e91906126d1565b60405180910390f35b34801561039357600080fd5b5061039c610ee0565b6040516103a9919061239d565b60405180910390f35b6103cc60048036038101906103c79190611e1a565b610f09565b005b3480156103da57600080fd5b506103f560048036038101906103f0919061204a565b610fe7565b005b34801561040357600080fd5b5061040c61112d565b6040516104199190612495565b60405180910390f35b34801561042e57600080fd5b5061044960048036038101906104449190611dc2565b6111df565b005b61046560048036038101906104609190611c6a565b6112f5565b005b610481600480360381019061047c9190611dc2565b611542565b005b34801561048f57600080fd5b506104aa60048036038101906104a59190611c41565b611600565b005b3480156104b857600080fd5b506104d360048036038101906104ce9190611fe7565b6116f8565b6040516104e091906123b8565b60405180910390f35b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461054357600080fd5b600360008561ffff1661ffff1681526020019081526020016000208054610569906129f5565b905083511480156105af5750600360008561ffff1661ffff16815260200190815260200160002060405161059d919061230c565b60405180910390208380519060200120145b6105ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105e5906123f5565b60405180910390fd5b600180600082825461060091906127e6565b9250508190555050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166307e0db17826040518263ffffffff1660e01b815260040161068e9190612495565b600060405180830381600087803b1580156106a857600080fd5b505af11580156106bc573d6000803e3d6000fd5b5050505050565b6000600290506000818585856040516020016106e2949392919061234f565b6040516020818303038152906040529050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c5803100348a8a8a60405180602001604052806000815250336000896040518963ffffffff1660e01b815260040161076b97969594939291906124e2565b6000604051808303818588803b15801561078457600080fd5b505af1158015610798573d6000803e3d6000fd5b50505050505050505050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166310ddb137826040518263ffffffff1660e01b81526004016108029190612495565b600060405180830381600087803b15801561081c57600080fd5b505af1158015610830573d6000803e3d6000fd5b5050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cbed8b9c600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663096568f6306040518263ffffffff1660e01b81526004016108d0919061239d565b60206040518083038186803b1580156108e857600080fd5b505afa1580156108fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109209190611d5d565b846005856040516020016109349190612495565b6040516020818303038152906040526040518563ffffffff1660e01b815260040161096294939291906125eb565b600060405180830381600087803b15801561097c57600080fd5b505af1158015610990573d6000803e3d6000fd5b505050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342d65a8d8484846040518463ffffffff1660e01b81526004016109f7939291906124b0565b600060405180830381600087803b158015610a1157600080fd5b505af1158015610a25573d6000803e3d6000fd5b50505050505050565b600060069050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cbed8b9c600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663096568f6306040518263ffffffff1660e01b8152600401610acd919061239d565b60206040518083038186803b158015610ae557600080fd5b505afa158015610af9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1d9190611d5d565b858486604051602001610b30919061239d565b6040516020818303038152906040526040518563ffffffff1660e01b8152600401610b5e9493929190612685565b600060405180830381600087803b158015610b7857600080fd5b505af1158015610b8c573d6000803e3d6000fd5b50505050505050565b60015481565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663096568f6306040518263ffffffff1660e01b8152600401610bf8919061239d565b60206040518083038186803b158015610c1057600080fd5b505afa158015610c24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c489190611d5d565b905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cbed8b9c600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663096568f6306040518263ffffffff1660e01b8152600401610ce6919061239d565b60206040518083038186803b158015610cfe57600080fd5b505afa158015610d12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d369190611d5d565b84600285604051602001610d4a9190612495565b6040516020818303038152906040526040518563ffffffff1660e01b8152600401610d78949392919061259f565b600060405180830381600087803b158015610d9257600080fd5b505af1158015610da6573d6000803e3d6000fd5b505050505050565b610db6611864565b73ffffffffffffffffffffffffffffffffffffffff16610dd4610ee0565b73ffffffffffffffffffffffffffffffffffffffff1614610e2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2190612455565b60405180910390fd5b610e34600061186c565b565b60036020528060005260406000206000915090508054610e55906129f5565b80601f0160208091040260200160405190810160405280929190818152602001828054610e81906129f5565b8015610ece5780601f10610ea357610100808354040283529160200191610ece565b820191906000526020600020905b815481529060010190602001808311610eb157829003601f168201915b505050505081565b6000600154905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006001905060008183604051602001610f24929190612323565b6040516020818303038152906040529050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c58031003488888860405180602001604052806000815250336000896040518963ffffffff1660e01b8152600401610fad97969594939291906124e2565b6000604051808303818588803b158015610fc657600080fd5b505af1158015610fda573d6000803e3d6000fd5b5050505050505050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cbed8b9c600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663096568f6306040518263ffffffff1660e01b8152600401611080919061239d565b60206040518083038186803b15801561109857600080fd5b505afa1580156110ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d09190611d5d565b868686866040518663ffffffff1660e01b81526004016110f4959493929190612637565b600060405180830381600087803b15801561110e57600080fd5b505af1158015611122573d6000803e3d6000fd5b505050505050505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663da1a7c9a306040518263ffffffff1660e01b815260040161118a919061239d565b60206040518083038186803b1580156111a257600080fd5b505afa1580156111b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111da9190611d5d565b905090565b6111e7611864565b73ffffffffffffffffffffffffffffffffffffffff16611205610ee0565b73ffffffffffffffffffffffffffffffffffffffff161461125b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161125290612455565b60405180910390fd5b6000600360008561ffff1661ffff1681526020019081526020016000208054611283906129f5565b9050146112c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112bc90612475565b60405180910390fd5b8181600360008661ffff1661ffff16815260200190815260200160002091906112ef929190611972565b50505050565b82829050858590501461133d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161133490612415565b60405180910390fd5b6000858590509050600061135a823461193090919063ffffffff16565b905060005b828110156114c757600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c5803100838a8a858181106113df577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906113f49190611d34565b89898681811061142d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200281019061143f91906126ec565b604051806020016040528060008152508a6000604051806020016040528060008152506040518963ffffffff1660e01b815260040161148497969594939291906124e2565b6000604051808303818588803b15801561149d57600080fd5b505af11580156114b1573d6000803e3d6000fd5b5050505050806114c090612a58565b905061135f565b5060006114ef6114e0848461194690919063ffffffff16565b3461195c90919063ffffffff16565b90508373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611537573d6000803e3d6000fd5b505050505050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c58031003485858560405180602001604052806000815250336000604051806020016040528060008152506040518963ffffffff1660e01b81526004016115c997969594939291906124e2565b6000604051808303818588803b1580156115e257600080fd5b505af11580156115f6573d6000803e3d6000fd5b5050505050505050565b611608611864565b73ffffffffffffffffffffffffffffffffffffffff16611626610ee0565b73ffffffffffffffffffffffffffffffffffffffff161461167c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161167390612455565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156116ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116e390612435565b60405180910390fd5b6116f58161186c565b50565b6060600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f5ecbdbc600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663096568f6306040518263ffffffff1660e01b8152600401611793919061239d565b60206040518083038186803b1580156117ab57600080fd5b505afa1580156117bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e39190611d5d565b8630866040518563ffffffff1660e01b8152600401611805949392919061255a565b60006040518083038186803b15801561181d57600080fd5b505afa158015611831573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061185a9190611cf3565b9050949350505050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000818361193e919061283c565b905092915050565b60008183611954919061286d565b905092915050565b6000818361196a91906128c7565b905092915050565b82805461197e906129f5565b90600052602060002090601f0160209004810192826119a057600085556119e7565b82601f106119b957803560ff19168380011785556119e7565b828001600101855582156119e7579182015b828111156119e65782358255916020019190600101906119cb565b5b5090506119f491906119f8565b5090565b5b80821115611a115760008160009055506001016119f9565b5090565b6000611a28611a2384612768565b612743565b905082815260208101848484011115611a4057600080fd5b611a4b8482856129b3565b509392505050565b6000611a66611a6184612768565b612743565b905082815260208101848484011115611a7e57600080fd5b611a898482856129c2565b509392505050565b600081359050611aa081612d79565b92915050565b600081359050611ab581612d90565b92915050565b60008083601f840112611acd57600080fd5b8235905067ffffffffffffffff811115611ae657600080fd5b602083019150836020820283011115611afe57600080fd5b9250929050565b60008083601f840112611b1757600080fd5b8235905067ffffffffffffffff811115611b3057600080fd5b602083019150836020820283011115611b4857600080fd5b9250929050565b60008083601f840112611b6157600080fd5b8235905067ffffffffffffffff811115611b7a57600080fd5b602083019150836001820283011115611b9257600080fd5b9250929050565b600082601f830112611baa57600080fd5b8135611bba848260208601611a15565b91505092915050565b600082601f830112611bd457600080fd5b8151611be4848260208601611a53565b91505092915050565b600081359050611bfc81612da7565b92915050565b600081519050611c1181612da7565b92915050565b600081359050611c2681612dbe565b92915050565b600081359050611c3b81612dd5565b92915050565b600060208284031215611c5357600080fd5b6000611c6184828501611a91565b91505092915050565b600080600080600060608688031215611c8257600080fd5b600086013567ffffffffffffffff811115611c9c57600080fd5b611ca888828901611b05565b9550955050602086013567ffffffffffffffff811115611cc757600080fd5b611cd388828901611abb565b93509350506040611ce688828901611aa6565b9150509295509295909350565b600060208284031215611d0557600080fd5b600082015167ffffffffffffffff811115611d1f57600080fd5b611d2b84828501611bc3565b91505092915050565b600060208284031215611d4657600080fd5b6000611d5484828501611bed565b91505092915050565b600060208284031215611d6f57600080fd5b6000611d7d84828501611c02565b91505092915050565b60008060408385031215611d9957600080fd5b6000611da785828601611bed565b9250506020611db885828601611a91565b9150509250929050565b600080600060408486031215611dd757600080fd5b6000611de586828701611bed565b935050602084013567ffffffffffffffff811115611e0257600080fd5b611e0e86828701611b4f565b92509250509250925092565b60008060008060608587031215611e3057600080fd5b6000611e3e87828801611bed565b945050602085013567ffffffffffffffff811115611e5b57600080fd5b611e6787828801611b4f565b93509350506040611e7a87828801611c17565b91505092959194509250565b60008060008060008060a08789031215611e9f57600080fd5b6000611ead89828a01611bed565b965050602087013567ffffffffffffffff811115611eca57600080fd5b611ed689828a01611b4f565b95509550506040611ee989828a01611c17565b9350506060611efa89828a01611c17565b9250506080611f0b89828a01611a91565b9150509295509295509295565b60008060008060808587031215611f2e57600080fd5b6000611f3c87828801611bed565b945050602085013567ffffffffffffffff811115611f5957600080fd5b611f6587828801611b99565b9350506040611f7687828801611c2c565b925050606085013567ffffffffffffffff811115611f9357600080fd5b611f9f87828801611b99565b91505092959194509250565b60008060408385031215611fbe57600080fd5b6000611fcc85828601611bed565b9250506020611fdd85828601611bed565b9150509250929050565b60008060008060808587031215611ffd57600080fd5b600061200b87828801611bed565b945050602061201c87828801611bed565b935050604061202d87828801611a91565b925050606061203e87828801611c17565b91505092959194509250565b60008060008060006080868803121561206257600080fd5b600061207088828901611bed565b955050602061208188828901611bed565b945050604061209288828901611c17565b935050606086013567ffffffffffffffff8111156120af57600080fd5b6120bb88828901611b4f565b92509250509295509295909350565b6120d38161290d565b82525050565b6120e2816128fb565b82525050565b6120f96120f4826128fb565b612aa1565b82525050565b600061210b83856127b9565b93506121188385846129b3565b61212183612b9d565b840190509392505050565b6000612137826127ae565b61214181856127b9565b93506121518185602086016129c2565b61215a81612b9d565b840191505092915050565b60008154612172816129f5565b61217c81866127ca565b9450600182166000811461219757600181146121a8576121db565b60ff198316865281860193506121db565b6121b185612799565b60005b838110156121d3578154818901526001820191506020810190506121b4565b838801955050505b50505092915050565b6121ed8161296b565b82525050565b6121fc8161298f565b82525050565b61220b816129a1565b82525050565b600061221e605d836127d5565b915061222982612bc8565b606082019050919050565b60006122416041836127d5565b915061224c82612c3d565b606082019050919050565b60006122646026836127d5565b915061226f82612cb2565b604082019050919050565b60006122876020836127d5565b915061229282612d01565b602082019050919050565b60006122aa6038836127d5565b91506122b582612d2a565b604082019050919050565b6122c98161291f565b82525050565b6122e06122db8261291f565b612ab3565b82525050565b6122ef8161294d565b82525050565b6123066123018261294d565b612ad7565b82525050565b60006123188284612165565b915081905092915050565b600061232f82856122cf565b60028201915061233f82846122f5565b6020820191508190509392505050565b600061235b82876122cf565b60028201915061236b82866122f5565b60208201915061237b82856122f5565b60208201915061238b82846120e8565b60148201915081905095945050505050565b60006020820190506123b260008301846120d9565b92915050565b600060208201905081810360008301526123d2818461212c565b905092915050565b60006020820190506123ef60008301846121e4565b92915050565b6000602082019050818103600083015261240e81612211565b9050919050565b6000602082019050818103600083015261242e81612234565b9050919050565b6000602082019050818103600083015261244e81612257565b9050919050565b6000602082019050818103600083015261246e8161227a565b9050919050565b6000602082019050818103600083015261248e8161229d565b9050919050565b60006020820190506124aa60008301846122c0565b92915050565b60006040820190506124c560008301866122c0565b81810360208301526124d88184866120ff565b9050949350505050565b600060c0820190506124f7600083018a6122c0565b818103602083015261250a81888a6120ff565b9050818103604083015261251e818761212c565b905061252d60608301866120ca565b61253a60808301856120d9565b81810360a083015261254c818461212c565b905098975050505050505050565b600060808201905061256f60008301876122c0565b61257c60208301866122c0565b61258960408301856120d9565b61259660608301846122e6565b95945050505050565b60006080820190506125b460008301876122c0565b6125c160208301866122c0565b6125ce60408301856121f3565b81810360608301526125e0818461212c565b905095945050505050565b600060808201905061260060008301876122c0565b61260d60208301866122c0565b61261a6040830185612202565b818103606083015261262c818461212c565b905095945050505050565b600060808201905061264c60008301886122c0565b61265960208301876122c0565b61266660408301866122e6565b81810360608301526126798184866120ff565b90509695505050505050565b600060808201905061269a60008301876122c0565b6126a760208301866122c0565b6126b460408301856122e6565b81810360608301526126c6818461212c565b905095945050505050565b60006020820190506126e660008301846122e6565b92915050565b6000808335600160200384360303811261270557600080fd5b80840192508235915067ffffffffffffffff82111561272357600080fd5b60208301925060018202360383131561273b57600080fd5b509250929050565b600061274d61275e565b90506127598282612a27565b919050565b6000604051905090565b600067ffffffffffffffff82111561278357612782612b6e565b5b61278c82612b9d565b9050602081019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60006127f18261294d565b91506127fc8361294d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561283157612830612ae1565b5b828201905092915050565b60006128478261294d565b91506128528361294d565b92508261286257612861612b10565b5b828204905092915050565b60006128788261294d565b91506128838361294d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156128bc576128bb612ae1565b5b828202905092915050565b60006128d28261294d565b91506128dd8361294d565b9250828210156128f0576128ef612ae1565b5b828203905092915050565b60006129068261292d565b9050919050565b60006129188261292d565b9050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600067ffffffffffffffff82169050919050565b60006129768261297d565b9050919050565b60006129888261292d565b9050919050565b600061299a8261294d565b9050919050565b60006129ac8261294d565b9050919050565b82818337600083830152505050565b60005b838110156129e05780820151818401526020810190506129c5565b838111156129ef576000848401525b50505050565b60006002820490506001821680612a0d57607f821691505b60208210811415612a2157612a20612b3f565b5b50919050565b612a3082612b9d565b810181811067ffffffffffffffff82111715612a4f57612a4e612b6e565b5b80604052505050565b6000612a638261294d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612a9657612a95612ae1565b5b600182019050919050565b6000612aac82612ac5565b9050919050565b6000612abe82612bae565b9050919050565b6000612ad082612bbb565b9050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160f01b9050919050565b60008160601b9050919050565b7f496e76616c696420736f757263652073656e64657220616464726573732e206f60008201527f776e65722073686f756c642063616c6c2073657454727573746564536f75726360208201527f65282920746f20656e61626c6520736f7572636520636f6e7472616374000000604082015250565b7f5f647374436861696e4964732e6c656e6774682c205f647374436f756e74657260008201527f4d6f636b4164647265737365732e6c656e677468206e6f74207468652073616d60208201527f6500000000000000000000000000000000000000000000000000000000000000604082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f54686520736f7572636520616464726573732068617320616c7265616479206260008201527f65656e2073657420666f722074686520636861696e4964210000000000000000602082015250565b612d82816128fb565b8114612d8d57600080fd5b50565b612d998161290d565b8114612da457600080fd5b50565b612db08161291f565b8114612dbb57600080fd5b50565b612dc78161294d565b8114612dd257600080fd5b50565b612dde81612957565b8114612de957600080fd5b5056fea2646970667358221220d66ce8a28fa28128846d620d2e08aac252aff31c2bef9df6c163b4153f11967a64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/OmniCounter.sol:OmniCounter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 457,
        "contract": "contracts/OmniCounter.sol:OmniCounter",
        "label": "messageCounter",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 460,
        "contract": "contracts/OmniCounter.sol:OmniCounter",
        "label": "layerZeroEndpoint",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ILayerZeroEndpoint)1145"
      },
      {
        "astId": 464,
        "contract": "contracts/OmniCounter.sol:OmniCounter",
        "label": "trustedSourceLookup",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint16,t_bytes_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(ILayerZeroEndpoint)1145": {
        "encoding": "inplace",
        "label": "contract ILayerZeroEndpoint",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint16,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}